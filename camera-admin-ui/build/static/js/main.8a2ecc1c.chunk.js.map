{"version":3,"sources":["restCalls.js","components/Config.js","App.js","serviceWorker.js","index.js"],"names":["fetch","require","fetchData","url","a","method","headers","newUrl","transformResponse","req","withCredentials","timeout","ret","data","sendData","Option","Select","Config","props","state","loading","config","error","status","newCamera","ffmpeg","ffmpegPre","save","bind","handleMainTransportChange","handleCameraChange","cameraDatasource","cameraColumns","saveActiveChannel","addDatasource","commonColumns","this","setState","JSON","stringify","parse","message","title","dataIndex","key","render","text","meta","defaultValue","style","width","onChange","value","fieldName","Object","entries","map","keyValue","index","Text","disabled","editable","str","then","size","type","className","onClick","itemKey","valueItem","s","checked","killAll","e","target","mode","camera1","camera2","camera3","camera4","newItem","streamUrl","channels","push","rtsp","pos","rel","href","currentChannel","streamUrls","Array","isArray","length","i","console","log","transport","cameraNum","height","v","filter","channel","loadedConfig","forEach","camera","name","indicator","LoadingOutlined","fontSize","spin","commonDataSource","commonDatasource","code","file","columns","dataSource","scroll","x","pagination","total","pageSize","hideOnSinglePage","addColumns","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.8a2ecc1c.chunk.js","sourcesContent":["const fetch = require('axios');\n\nconst serverUrl = process.env.NODE_ENV !== 'production' ? 'http://localhost:3004' : '';\n\nexport async function fetchData(url, method = 'GET', headers) {\n  const newUrl = `${(serverUrl || '')}${url}`;\n  const ret = await fetch({\n    url: newUrl,\n    method,\n    headers,\n    transformResponse: (req) => req,\n    withCredentials: true,\n    timeout: 4900,\n  });\n  return ret.data;\n}\n\nexport async function sendData(url, method = 'POST', data, headers) {\n  const ret = await fetch({\n    url: `${(serverUrl || '')}${url}`,\n    method,\n    data,\n    transformResponse: (req) => req,\n    headers: headers || {\n      'Content-Type': 'application/json',\n    },\n    withCredentials: true,\n    timeout: 4900,\n  });\n  return ret.data;\n}\n","import React from 'react';\nimport './Config.css';\nimport {\n  Alert, Button, Select, Spin, Checkbox, Table, Typography,\n} from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { fetchData, sendData } from '../restCalls';\n\nconst { Option } = Select;\n/* eslint max-len: 0 */ // --> OFF\n/* eslint class-methods-use-this: 0 */ // --> OFF\n/* eslint no-unused-vars: 0 */ // --> OFF\nexport default class Config extends React.Component {\n  async save() {\n    this.setState(\n      { loading: true },\n    );\n    try {\n      const data = JSON.stringify(this.state.config.config);\n      const config = await sendData('/admin/config/save',\n        'POST', data);\n      this.setState({ config: JSON.parse(config) });\n    } catch (e) {\n      this.setState({ error: e.message });\n    } finally {\n      this.setState(\n        { loading: false },\n      );\n    }\n  }\n\n  async saveActiveChannel() {\n    this.setState(\n      { loading: true },\n    );\n    try {\n      const data = JSON.stringify(this.state.status);\n      const status = await sendData('/admin/status/save',\n        'POST', data);\n      this.setState({ status: JSON.parse(status) });\n    } catch (e) {\n      this.setState({ error: e.message });\n    } finally {\n      this.setState(\n        { loading: false },\n      );\n    }\n  }\n\n  commonColumns() {\n    return [\n      {\n        title: 'Parameter Name',\n        dataIndex: 'name',\n        key: 'name',\n        render: (text) => <a>{text}</a>,\n      },\n      {\n        title: 'Parameter Value',\n        dataIndex: 'value',\n        key: 'value',\n        render: (text, meta) => {\n          if (meta.key === '1') {\n            return (\n                            <div>\n                                <Select defaultValue={text} style={{ width: 120 }}\n                                        onChange={this.handleMainTransportChange}>\n                                    <Option value=\"udp\">UDP</Option>\n                                    <Option value=\"tcp\">TCP</Option>\n                                </Select>\n                            </div>);\n          }\n          if (meta.key === '2' || meta.key === '3') {\n            const fieldName = (meta.key === '3' ? 'ffmpeg' : 'ffmpegPre');\n            return (\n                            <div>\n                                <div>\n                                    {\n                                        this.state.config.config[fieldName]\n                                          ? Object.entries(this.state.config.config[fieldName]).map((keyValue, index) => {\n                                            const key = keyValue[0];\n                                            const value = keyValue[1];\n                                            return (<div>\n                                                    <Typography.Text\n                                                        disabled>{key}\n                                                    </Typography.Text>\n                                                    <Typography.Text disabled>:</Typography.Text>\n                                                    <Typography.Text editable={{\n                                                      onChange: (str) => {\n                                                        const config = { ...this.state.config };\n                                                        if (!config.config[fieldName]) {\n                                                          config.config[fieldName] = {};\n                                                        }\n                                                        config.config[fieldName][key] = str;\n                                                        this.save().then();\n                                                        this.setState({ config });\n                                                      },\n                                                    }}>{value}</Typography.Text><Button size={'small'} type={'danger'}\n                                                                                        className={'smallButton'}\n                                                                                        onClick={\n                                                                                            () => {\n                                                                                              const config = { ...this.state.config };\n                                                                                              if (!config.config[fieldName]) {\n                                                                                                config.config[fieldName] = {};\n                                                                                              }\n                                                                                              delete config.config[fieldName][key];\n                                                                                              this.setState({ config });\n                                                                                              this.save().then();\n                                                                                            }\n                                                                                        }>-</Button>\n                                                </div>);\n                                          }) : <div/>\n                                    }\n                                    {\n                                        <div>\n                                            <Typography.Text\n                                                editable={{\n                                                  onChange: (str) => {\n                                                    const ffmpeg = { ...this.state[fieldName] };\n                                                    ffmpeg.key = str;\n                                                    ffmpeg.itemKey = -1;\n                                                    const state = {};\n                                                    state[fieldName] = ffmpeg;\n                                                    this.setState(state);\n                                                  },\n                                                }}>{this.state[fieldName] && this.state[fieldName].itemKey === -1 ? this.state[fieldName].key : ''}\n                                            </Typography.Text>\n                                            <Typography.Text disabled>:</Typography.Text>\n                                            <Typography.Text editable={{\n                                              onChange: (str) => {\n                                                const ffmpeg = { ...this.state[fieldName] };\n                                                ffmpeg.value = str;\n                                                ffmpeg.valueItem = -1;\n                                                const state = {};\n                                                state[fieldName] = ffmpeg;\n                                                this.setState(state);\n                                              },\n                                            }}>{this.state[fieldName] && this.state[fieldName].valueItem === -1 ? this.state[fieldName].value : ''}</Typography.Text>\n                                            {this.state[fieldName].valueItem === -1 && this.state[fieldName].itemKey === -1\n                                              ? <Button onClick={\n                                                    () => {\n                                                      const ffmpeg = { ...this.state[fieldName] };\n                                                      const config = { ...this.state.config };\n                                                      if (!config.config[fieldName]) {\n                                                        config.config[fieldName] = {};\n                                                      }\n                                                      config.config[fieldName][ffmpeg.key] = ffmpeg.value;\n                                                      this.setState({ config });\n                                                      this.save().then(() => {\n                                                        const s = {};\n                                                        s[fieldName] = {};\n                                                        this.setState(s);\n                                                      });\n                                                    }\n                                                }>Add</Button>\n                                              : <Button disabled>Add</Button>\n                                            }\n                                        </div>\n                                    }\n                                </div>\n                            </div>);\n          }\n          if (meta.key === '4') {\n            return (<div>\n                            <Checkbox\n                                checked={!!this.state.config.config.killAll}\n                                onChange={(e) => {\n                                  const config = { ...this.state.config };\n                                  config.config.killAll = e.target.checked;\n                                  this.setState(\n                                    { config },\n                                  );\n                                  this.save().then();\n                                }}></Checkbox>\n                        </div>);\n          }\n          return (<a>{text}</a>);\n        },\n      }];\n  }\n\n  addColumns() {\n    return [{\n      title: 'Mode',\n      dataIndex: 'mode',\n      key: 'mode',\n      render: (text) => (<div>\n                    <Select defaultValue={text} style={{ width: 120 }}\n                            onChange={this.handleCameraChange}>\n                        <Option value=\"single\">1 Camera</Option>\n                        <Option value=\"multi\">4 Cameras</Option>\n                    </Select>\n                </div>),\n    },\n    {\n      title: 'rtsp Streams',\n      dataIndex: 'rtsp',\n      key: 'rtsp',\n      render: () => (this.state.newCamera.mode === 'multi' ? (\n                        <div>\n                            <Typography.Text editable={{\n                              onChange: (str) => {\n                                const newCamera = { ...this.state.newCamera };\n                                newCamera.camera1 = str;\n                                this.setState({ newCamera });\n                              },\n                            }}>{this.state.newCamera.camera1 || ''}</Typography.Text>\n                            <br/>\n                            <Typography.Text editable={{\n                              onChange: (str) => {\n                                const newCamera = { ...this.state.newCamera };\n                                newCamera.camera2 = str;\n                                this.setState({ newCamera });\n                              },\n                            }}>{this.state.newCamera.camera2 || ''}</Typography.Text>\n                            <br/>\n                            <Typography.Text editable={{\n                              onChange: (str) => {\n                                const newCamera = { ...this.state.newCamera };\n                                newCamera.camera3 = str;\n                                this.setState({ newCamera });\n                              },\n                            }}>{this.state.newCamera.camera3 || ''}</Typography.Text>\n                            <br/>\n                            <Typography.Text editable={{\n                              onChange: (str) => {\n                                const newCamera = { ...this.state.newCamera };\n                                newCamera.camera4 = str;\n                                this.setState({ newCamera });\n                              },\n                            }}>{this.state.newCamera.camera4 || ''}</Typography.Text>\n                            <br/>\n                        </div>) : <Typography.Text editable={{\n                          onChange: (str) => {\n                            const newCamera = { ...this.state.newCamera };\n                            newCamera.camera1 = str;\n                            this.setState({ newCamera });\n                          },\n                        }}>{this.state.newCamera.camera1 || ''}</Typography.Text>),\n    },\n    {\n      title: '',\n      dataIndex: 'save',\n      key: 'save',\n      render: () => {\n        const mode = this.state.newCamera.mode || 'single';\n        let disabled = false;\n        if (mode === 'single' && !this.state.newCamera.camera1) {\n          disabled = true;\n        }\n        if (mode === 'multi'\n                        && (!this.state.newCamera.camera1\n                            || !this.state.newCamera.camera2\n                            || !this.state.newCamera.camera3\n                            || !this.state.newCamera.camera4\n                        )) {\n          disabled = true;\n        }\n        return disabled ? (<div>\n                        <Button disabled>Save</Button>\n                    </div>) : <div><Button onClick={\n                        () => {\n                          const config = { ...this.state.config };\n                          let newItem;\n                          if (mode === 'single') {\n                            newItem = {\n                              streamUrl: this.state.newCamera.camera1,\n                            };\n                          } else {\n                            newItem = {\n                              streamUrl: [this.state.newCamera.camera1,\n                                this.state.newCamera.camera2,\n                                this.state.newCamera.camera3,\n                                this.state.newCamera.camera4],\n                            };\n                          }\n\n                          config.config.channels.push(newItem);\n                          this.setState({ config });\n                          this.save().then(() => {\n                            this.setState({ newCamera: {} });\n                          });\n                        }\n                    }>Save</Button></div>;\n      },\n    }];\n  }\n\n  addDatasource() {\n    const newCamera = this.state.newCamera;\n    return [{\n      mode: newCamera.mode || 'single',\n      rtsp: [newCamera.camera1, newCamera.camera2, newCamera.camera3, newCamera.camera4],\n    }];\n  }\n\n  cameraColumns() {\n    return [\n      {\n        title: 'Status',\n        dataIndex: 'status',\n        key: 'status',\n        render: (status, meta, pos) => (status\n          ? <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"/camera.html\">Current</a>\n          : <Button onClick={\n                            () => {\n                              this.state.status.currentChannel = pos;\n                              this.saveActiveChannel().then();\n                            }\n                        }>Activate</Button>),\n      },\n      {\n        title: 'Camera',\n        dataIndex: 'camera',\n        key: 'camera',\n        render: (text) => <a>{text}</a>,\n      },\n      {\n        title: 'Camera Mode',\n        dataIndex: 'mode',\n        key: 'mode',\n        render: (text) => <a>{text === 1 ? '1 Camera' : '4 Cameras'}</a>,\n      },\n      {\n        title: 'rtsp Streams',\n        dataIndex: 'rtsp',\n        key: 'rtsp',\n        render: (streamUrls, meta, data) => {\n          if (streamUrls) {\n            if (Array.isArray(streamUrls)) {\n              if (streamUrls.length > 1) {\n                return streamUrls.map(((streamUrl, i) => <div><Typography.Text editable={{\n                  onChange: (str) => {\n                    this.state.config.config.channels[data].streamUrl[i] = str;\n                    this.save().then();\n                  },\n                }}>{streamUrl}</Typography.Text><br/></div>));\n              }\n              return <Typography.Text editable={{\n                onChange: (str) => {\n                  this.state.config.config.channels[data].streamUrl = str;\n                  this.save().then();\n                },\n              }}>{streamUrls.length > 0 ? streamUrls[0] : ''}</Typography.Text>;\n            }\n            return <Typography.Text editable={{\n              onChange: (str) => {\n                this.state.config.config.channels[data].streamUrl = str;\n                this.save().then();\n              },\n            }}>{streamUrls}</Typography.Text>;\n          }\n          return <a/>;\n        },\n      },\n      {\n        title: 'Transport',\n        dataIndex: 'transport',\n        key: 'transport',\n        render: (text, meta, index) => (\n                        <div>\n                            <Select defaultValue={text} style={{ width: 120 }}\n                                    onChange={(value) => {\n                                      console.log(`selected ${value}`);\n                                      const config = { ...this.state.config };\n                                      config.config.channels[index].transport = value;\n                                      this.setState(\n                                        { config },\n                                      );\n                                      this.save().then();\n                                    }}>\n                                <Option value=\"udp\">UDP</Option>\n                                <Option value=\"tcp\">TCP</Option>\n                            </Select>\n                        </div>),\n      },\n      {\n        title: 'RTSP FFmpeg parameters',\n        dataIndex: 'ffmpegPre',\n        key: 'ffmpegPre',\n        render: (text, meta, index) => (<div>\n                        <div>\n                            {\n                                this.state.config.config.channels[index].ffmpegPre\n                                  ? Object.entries(this.state.config.config.channels[index].ffmpegPre).map((keyValue) => {\n                                    const key = keyValue[0];\n                                    const value = keyValue[1];\n                                    return (<div>\n                                            <Typography.Text\n                                                disabled>{key}\n                                            </Typography.Text>\n                                            <Typography.Text disabled>:</Typography.Text>\n                                            <Typography.Text editable={{\n                                              onChange: (str) => {\n                                                const config = { ...this.state.config };\n                                                if (!config.config.channels[index].ffmpegPre) {\n                                                  config.config.channels[index].ffmpegPre = {};\n                                                }\n                                                config.config.channels[index].ffmpegPre[key] = str;\n                                                this.save().then();\n                                                this.setState({ config });\n                                              },\n                                            }}>{value}</Typography.Text><Button size={'small'} type={'danger'}\n                                                                                className={'smallButton'} onClick={\n                                            () => {\n                                              const config = { ...this.state.config };\n                                              if (!config.config.channels[index].ffmpegPre) {\n                                                config.config.channels[index].ffmpegPre = {};\n                                              }\n                                              delete config.config.channels[index].ffmpegPre[key];\n                                              this.setState({ config });\n                                              this.save().then();\n                                            }\n                                        }>-</Button>\n                                        </div>);\n                                  }) : <div/>\n                            }\n                            {\n                                <div>\n                                    <Typography.Text\n                                        editable={{\n                                          onChange: (str) => {\n                                            const ffmpeg = { ...this.state.ffmpegPre };\n                                            ffmpeg.key = str;\n                                            ffmpeg.itemKey = index;\n                                            this.setState({ ffmpegPre: ffmpeg });\n                                          },\n                                        }}>{this.state.ffmpegPre && this.state.ffmpegPre.itemKey === index ? this.state.ffmpegPre.key : ''}\n                                    </Typography.Text>\n                                    <Typography.Text disabled>:</Typography.Text>\n                                    <Typography.Text editable={{\n                                      onChange: (str) => {\n                                        const ffmpeg = { ...this.state.ffmpegPre };\n                                        ffmpeg.value = str;\n                                        ffmpeg.valueItem = index;\n                                        this.setState({ ffmpegPre: ffmpeg });\n                                      },\n                                    }}>{this.state.ffmpegPre && this.state.ffmpegPre.valueItem === index ? this.state.ffmpegPre.value : ''}</Typography.Text>\n                                    {this.state.ffmpegPre.valueItem === index && this.state.ffmpegPre.itemKey === index\n                                      ? <Button onClick={\n                                            () => {\n                                              const ffmpeg = { ...this.state.ffmpegPre };\n                                              const config = { ...this.state.config };\n                                              if (!config.config.channels[index].ffmpegPre) {\n                                                config.config.channels[index].ffmpegPre = {};\n                                              }\n                                              config.config.channels[index].ffmpegPre[ffmpeg.key] = ffmpeg.value;\n                                              this.setState({ config });\n                                              this.save().then(() => {\n                                                this.setState({ ffmpegPre: {} });\n                                              });\n                                            }\n                                        }>Add</Button>\n                                      : <Button disabled>Add</Button>\n                                    }\n                                </div>\n                            }\n                        </div>\n                    </div>),\n      },\n      {\n        title: 'Encode FFmpeg parameters',\n        dataIndex: 'ffmpeg',\n        key: 'ffmpeg',\n        render: (text, meta, index) => {\n          const cameraNum = Array.isArray(this.state.config.config.channels[index].streamUrl)\n            ? this.state.config.config.channels[index].streamUrl.length : 1;\n          return (<div>\n                        <Typography.Text\n                            disabled>-vf</Typography.Text>\n                        <Typography.Text disabled>:</Typography.Text>\n                        <Typography.Text\n                            disabled>{`scale=${this.state.status.width / cameraNum}:${this.state.status.height / cameraNum}`}</Typography.Text>\n                        <br/>\n\n                        <div>\n                            {\n                                this.state.config.config.channels[index].ffmpeg\n                                  ? Object.entries(this.state.config.config.channels[index].ffmpeg).map((keyValue) => {\n                                    const key = keyValue[0];\n                                    const value = keyValue[1];\n                                    return (<div>\n                                            <Typography.Text\n                                                disabled>{key}\n                                            </Typography.Text>\n                                            <Typography.Text disabled>:</Typography.Text>\n                                            <Typography.Text editable={{\n                                              onChange: (str) => {\n                                                const config = { ...this.state.config };\n                                                if (!config.config.channels[index].ffmpeg) {\n                                                  config.config.channels[index].ffmpeg = {};\n                                                }\n                                                config.config.channels[index].ffmpeg[key] = str;\n                                                this.save().then();\n                                                this.setState({ config });\n                                              },\n                                            }}>{value}</Typography.Text><Button size={'small'} type={'danger'}\n                                                                                className={'smallButton'} onClick={\n                                            () => {\n                                              const config = { ...this.state.config };\n                                              if (!config.config.channels[index].ffmpeg) {\n                                                config.config.channels[index].ffmpeg = {};\n                                              }\n                                              delete config.config.channels[index].ffmpeg[key];\n                                              this.save().then();\n                                              this.setState({ config });\n                                            }\n                                        }>-</Button>\n                                        </div>);\n                                  }) : <div/>\n                            }\n                            {\n                                <div>\n                                    <Typography.Text\n                                        editable={{\n                                          onChange: (str) => {\n                                            const ffmpeg = { ...this.state.ffmpeg };\n                                            ffmpeg.key = str;\n                                            ffmpeg.itemKey = index;\n                                            this.setState({ ffmpeg });\n                                          },\n                                        }}>{this.state.ffmpeg && this.state.ffmpeg.itemKey === index ? this.state.ffmpeg.key : ''}\n                                    </Typography.Text>\n                                    <Typography.Text disabled>:</Typography.Text>\n                                    <Typography.Text editable={{\n                                      onChange: (str) => {\n                                        const ffmpeg = { ...this.state.ffmpeg };\n                                        ffmpeg.value = str;\n                                        ffmpeg.valueItem = index;\n                                        this.setState({ ffmpeg });\n                                      },\n                                    }}>{this.state.ffmpeg && this.state.ffmpeg.valueItem === index ? this.state.ffmpeg.value : ''}</Typography.Text>\n                                    {this.state.ffmpeg.valueItem === index && this.state.ffmpeg.itemKey === index\n                                      ? <Button onClick={\n                                            () => {\n                                              const ffmpeg = { ...this.state.ffmpeg };\n                                              const config = { ...this.state.config };\n                                              if (!config.config.channels[index].ffmpeg) {\n                                                config.config.channels[index].ffmpeg = {};\n                                              }\n                                              config.config.channels[index].ffmpeg[ffmpeg.key] = ffmpeg.value;\n                                              this.setState({ config });\n                                              this.save().then(() => {\n                                                this.setState({ ffmpeg: {} });\n                                              });\n                                            }\n                                        }>Add</Button>\n                                      : <Button disabled>Add</Button>\n                                    }\n                                </div>\n                            }\n                        </div>\n                    </div>);\n        },\n      },\n      {\n        title: '',\n        dataIndex: 'actions',\n        key: 'actions',\n        render: (data, meta, index) => {\n          const onUp = () => {\n            const config = { ...this.state.config };\n            const v = config.config.channels[index];\n            config.config.channels[index] = config.config.channels[index - 1];\n            config.config.channels[index - 1] = v;\n            const status = { ...this.state.status };\n            if (status.currentChannel === index) {\n              status.currentChannel -= 1;\n            }\n            this.setState({ config, status });\n            this.save().then(() => {\n              this.saveActiveChannel().then();\n            });\n          };\n          const onDown = () => {\n            const config = { ...this.state.config };\n            const v = config.config.channels[index];\n            config.config.channels[index] = config.config.channels[index + 1];\n            config.config.channels[index + 1] = v;\n            const status = { ...this.state.status };\n            if (status.currentChannel === index) {\n              status.currentChannel += 1;\n            }\n            this.setState({ config, status });\n            this.save().then(() => {\n              this.saveActiveChannel().then();\n            });\n          };\n          return (\n                        <div>\n                            {index === 0 ? <Button size={'small'} className={'smallButton'} disabled>UP</Button>\n                              : <Button size={'small'} className={'smallButton'} onClick={onUp}>UP</Button>}\n                            {index === this.state.config.config.channels.length - 1\n                              ? <Button size={'small'} className={'smallButton'} disabled>DOWN</Button>\n                              : <Button size={'small'} className={'smallButton'} onClick={onDown}>DOWN</Button>}\n                            <Button size={'small'} type={'danger'} className={'smallButton'} onClick={() => {\n                              const config = { ...this.state.config };\n                              config.config.channels = config.config.channels.filter((channel, i) => i !== index);\n                              this.setState({ config });\n                              this.save().then();\n                            }}>Delete</Button>\n                        </div>\n          );\n        },\n\n      }];\n  }\n\n  cameraDatasource(loadedConfig) {\n    const ret = [];\n    if (loadedConfig.channels) {\n      loadedConfig.channels.forEach((channel, index) => {\n        ret.push({\n          status: index === this.state.status.currentChannel,\n          camera: index,\n          transport: channel.transport || loadedConfig.transport || 'udp',\n          mode: Array.isArray(channel.streamUrl) && channel.streamUrl.length > 1 ? 4 : 1,\n          rtsp: channel.streamUrl,\n          ffmpeg: channel.ffmpeg,\n          ffmpegPre: channel.ffmpegPre,\n        });\n      });\n    }\n    return ret;\n  }\n\n  commonDatasource(loadedConfig) {\n    return [\n      {\n        key: '1',\n        name: 'Default Transport',\n        value: loadedConfig.transport,\n      },\n      {\n        key: '2',\n        name: 'Default RTSP FFmpeg parameters',\n        value: loadedConfig.ffmpegPre,\n      },\n      {\n        key: '3',\n        name: 'Default Encode ffmpeg Parameters',\n        value: loadedConfig.ffmpeg,\n      },\n      {\n        key: '4',\n        name: 'Kill all ffmpeg during restart',\n        value: loadedConfig.killAll,\n      },\n\n    ];\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      config: null,\n      error: null,\n      status: null,\n      newCamera: {},\n      ffmpeg: {},\n      ffmpegPre: {},\n    };\n    this.save = this.save.bind(this);\n    this.handleMainTransportChange = this.handleMainTransportChange.bind(this);\n    this.handleCameraChange = this.handleCameraChange.bind(this);\n    this.cameraDatasource = this.cameraDatasource.bind(this);\n    this.cameraColumns = this.cameraColumns.bind(this);\n    this.saveActiveChannel = this.saveActiveChannel.bind(this);\n    this.addDatasource = this.addDatasource.bind(this);\n    this.commonColumns = this.commonColumns.bind(this);\n  }\n\n  async componentDidMount() {\n    this.setState(\n      { loading: true },\n    );\n    try {\n      const config = await fetchData('/admin/config/get', 'GET');\n      const status = await fetchData('/admin/status/get', 'GET');\n      this.setState({ config: JSON.parse(config) });\n      this.setState({ status: JSON.parse(status) });\n    } catch (e) {\n      this.setState({ error: e.message });\n    } finally {\n      this.setState(\n        { loading: false },\n      );\n    }\n  }\n\n  handleMainTransportChange(value) {\n    console.log(`selected ${value}`);\n    const config = { ...this.state.config };\n    config.config.transport = value;\n    this.setState(\n      { config },\n    );\n    this.save().then();\n  }\n\n  handleCameraChange(value) {\n    console.log(`selected ${value}`);\n    const newCamera = { ...this.state.newCamera };\n    newCamera.mode = value;\n    this.setState(\n      { newCamera },\n    );\n  }\n\n  render() {\n    const { loading, config, error } = this.state;\n    let ret;\n    if (loading) {\n      ret = <Spin indicator={(<LoadingOutlined style={{ fontSize: 128 }} spin/>)}/>;\n    } else if (!config || !config.config) {\n      ret = <Alert message=\"config is empty\" type=\"error\"/>;\n    } else {\n      const loadedConfig = config.config;\n      const commonDataSource = this.commonDatasource(loadedConfig);\n      const cameraDatasource = this.cameraDatasource(loadedConfig);\n      ret = <div>\n                        {error ? <Alert message={error} type=\"error\"/> : null\n                        }\n                        <Typography.Text>Common Settings</Typography.Text>\n                        <br/>\n                        <Typography.Text code>File: {loadedConfig.file}</Typography.Text>\n                        <br/>\n                        <Table columns={this.commonColumns()}\n                               dataSource={commonDataSource}\n                               scroll={{ x: 'max-content' }}\n                               pagination={{\n                                 total: commonDataSource.length,\n                                 pageSize: commonDataSource.length,\n                                 hideOnSinglePage: true,\n                               }}/>\n                        <br/>\n                        <br/>\n                        <Typography.Text>Add new Camera</Typography.Text>\n                        <br/>\n                        <Table columns={this.addColumns()}\n                               scroll={{ x: 'max-content' }}\n                               dataSource={this.addDatasource()}\n                               pagination={{\n                                 hideOnSinglePage: true,\n                               }}/>\n                        <Typography.Text>Camera Settings</Typography.Text>\n                        <br/>\n                        <Table columns={this.cameraColumns()}\n                               scroll={{ x: 'max-content' }}\n                               dataSource={cameraDatasource}\n                               pagination={{\n                                 total: cameraDatasource.length,\n                                 pageSize: cameraDatasource.length,\n                                 hideOnSinglePage: true,\n                               }}/>\n                    </div>;\n    }\n\n    return ret;\n  }\n}\n","import React from 'react'; // eslint-disable-line no-unused-vars\nimport Config from './components/Config'; // eslint-disable-line no-unused-vars\nimport './App.css';\n\nfunction App() {\n  return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <Config/>\n            </header>\n\n        </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n/* eslint no-param-reassign: 0 */ // --> OFF\n/* eslint no-use-before-define: 0 */ // --> OFF\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","/* eslint no-unused-vars: 0 */ // --> OFF\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}