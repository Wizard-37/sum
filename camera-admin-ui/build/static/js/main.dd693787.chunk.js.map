{"version":3,"sources":["restCalls.js","components/Config.js","App.js","serviceWorker.js","index.js"],"names":["fetch","require","fetchData","url","a","method","headers","newUrl","transformResponse","req","withCredentials","timeout","ret","data","sendData","Option","Select","Config","props","state","loading","config","error","status","newCamera","save","bind","handleMainTransportChange","handleCameraChange","cameraDatasource","cameraColumns","saveActiveChannel","addDatasource","this","setState","JSON","stringify","parse","message","title","dataIndex","key","render","text","meta","defaultValue","style","width","onChange","value","mode","Text","editable","str","camera1","camera2","camera3","camera4","disabled","onClick","newItem","streamUrl","channels","push","then","rtsp","pos","currentChannel","streamUrls","Array","isArray","length","map","i","index","console","log","transport","v","filter","channel","loadedConfig","forEach","camera","name","indicator","LoadingOutlined","fontSize","spin","commonDataSource","commonDatasource","type","code","file","columns","commonColumns","dataSource","pagination","total","pageSize","hideOnSinglePage","addColumns","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"kZAAMA,EAAQC,EAAQ,KAGf,SAAeC,EAAtB,kC,4CAAO,WAAyBC,GAAzB,iCAAAC,EAAA,6DAA8BC,EAA9B,+BAAuC,MAAOC,EAA9C,uBACCC,EADD,UACkC,IADlC,OACwCJ,GADxC,SAEeH,EAAM,CACpBG,IAAKI,EACLF,SACAC,UACAE,kBAAmB,SAACC,GAAD,OAASA,GAC5BC,iBAAiB,EACjBC,QAAS,OARV,cAEGC,EAFH,yBAUIA,EAAIC,MAVR,4C,sBAaA,SAAeC,EAAtB,kC,4CAAO,WAAwBX,GAAxB,iCAAAC,EAAA,6DAA6BC,EAA7B,+BAAsC,OAAQQ,EAA9C,uBAAoDP,EAApD,gCACeN,EAAM,CACpBG,IAAI,GAAD,OAAyB,IAAzB,OAA+BA,GAClCE,SACAQ,OACAL,kBAAmB,SAACC,GAAD,OAASA,GAC5BH,QAASA,GAAW,CAChB,eAAgB,oBAEpBI,iBAAiB,EACjBC,QAAS,OAVV,cACGC,EADH,yBAYIA,EAAIC,MAZR,4C,0BCXAE,EAAUC,IAAVD,OAGcE,E,kDAgWjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,SAAS,EACTC,OAAQ,KACRC,MAAO,KACPC,OAAQ,KACRC,UAAW,IAEf,EAAKC,KAAO,EAAKA,KAAKC,KAAV,gBACZ,EAAKC,0BAA4B,EAAKA,0BAA0BD,KAA/B,gBACjC,EAAKE,mBAAqB,EAAKA,mBAAmBF,KAAxB,gBAC1B,EAAKG,iBAAmB,EAAKA,iBAAiBH,KAAtB,gBACxB,EAAKI,cAAgB,EAAKA,cAAcJ,KAAnB,gBACrB,EAAKK,kBAAoB,EAAKA,kBAAkBL,KAAvB,gBACzB,EAAKM,cAAgB,EAAKA,cAAcN,KAAnB,gBAfN,E,4KA7VfO,KAAKC,SACD,CAACd,SAAS,I,SAGJP,EAAOsB,KAAKC,UAAUH,KAAKd,MAAME,OAAOA,Q,SACzBP,EAAS,qBAC1B,OAAQD,G,OADNQ,E,OAENY,KAAKC,SAAS,CAACb,OAAQc,KAAKE,MAAMhB,K,gDAElCY,KAAKC,SAAS,CAACZ,MAAO,KAAEgB,U,yBAExBL,KAAKC,SACD,CAACd,SAAS,I,qSAMlBa,KAAKC,SACD,CAACd,SAAS,I,SAGJP,EAAOsB,KAAKC,UAAUH,KAAKd,MAAMI,Q,SAClBT,EAAS,qBAC1B,OAAQD,G,OADNU,E,OAENU,KAAKC,SAAS,CAACX,OAAQY,KAAKE,MAAMd,K,gDAElCU,KAAKC,SAAS,CAACZ,MAAO,KAAEgB,U,yBAExBL,KAAKC,SACD,CAACd,SAAS,I,wKAKL,IAAD,OACZ,MAAO,CACH,CACImB,MAAO,iBACPC,UAAW,OACXC,IAAK,OACLC,OAAQ,SAAAC,GAAI,OAAI,2BAAIA,KAExB,CACIJ,MAAO,kBACPC,UAAW,QACXC,IAAK,QACLC,OAAQ,SAACC,EAAMC,GACX,MAAoB,MAAbA,EAAKH,IACR,6BACI,kBAAC,IAAD,CAAQI,aAAcF,EAAMG,MAAO,CAACC,MAAO,KACnCC,SAAU,EAAKrB,2BACnB,kBAACZ,EAAD,CAAQkC,MAAM,OAAd,OACA,kBAAClC,EAAD,CAAQkC,MAAM,OAAd,SAEE,2BAAIN,Q,mCAKpB,IAAD,OACT,MAAO,CAAC,CACJJ,MAAO,OACPC,UAAW,OACXC,IAAK,OACLC,OAAQ,SAACC,GACL,OAAQ,6BACJ,kBAAC,IAAD,CAAQE,aAAcF,EAAMG,MAAO,CAACC,MAAO,KACnCC,SAAU,EAAKpB,oBACnB,kBAACb,EAAD,CAAQkC,MAAM,UAAd,YACA,kBAAClC,EAAD,CAAQkC,MAAM,SAAd,iBAKZ,CACIV,MAAO,eACPC,UAAW,OACXC,IAAK,OACLC,OAAQ,WACJ,MAAqC,UAA9B,EAAKvB,MAAMK,UAAU0B,KACxB,6BACI,kBAAC,IAAWC,KAAZ,CAAiBC,SAAU,CACvBJ,SAAU,SAACK,GACP,IAAM7B,EAAS,eAAO,EAAKL,MAAMK,WACjCA,EAAU8B,QAAUD,EACpB,EAAKnB,SAAS,CAACV,iBAEnB,EAAKL,MAAMK,UAAU8B,SAAW,IACpC,6BACA,kBAAC,IAAWH,KAAZ,CAAiBC,SAAU,CACvBJ,SAAU,SAACK,GACP,IAAM7B,EAAS,eAAO,EAAKL,MAAMK,WACjCA,EAAU+B,QAAUF,EACpB,EAAKnB,SAAS,CAACV,iBAEnB,EAAKL,MAAMK,UAAU+B,SAAW,IACpC,6BACA,kBAAC,IAAWJ,KAAZ,CAAiBC,SAAU,CACvBJ,SAAU,SAACK,GACP,IAAM7B,EAAS,eAAO,EAAKL,MAAMK,WACjCA,EAAUgC,QAAUH,EACpB,EAAKnB,SAAS,CAACV,iBAEnB,EAAKL,MAAMK,UAAUgC,SAAW,IACpC,6BACA,kBAAC,IAAWL,KAAZ,CAAiBC,SAAU,CACvBJ,SAAU,SAACK,GACP,IAAM7B,EAAS,eAAO,EAAKL,MAAMK,WACjCA,EAAUiC,QAAUJ,EACpB,EAAKnB,SAAS,CAACV,iBAEnB,EAAKL,MAAMK,UAAUiC,SAAW,IACpC,8BACM,kBAAC,IAAWN,KAAZ,CAAiBC,SAAU,CACrCJ,SAAU,SAACK,GACP,IAAM7B,EAAS,eAAO,EAAKL,MAAMK,WACjCA,EAAU8B,QAAUD,EACpB,EAAKnB,SAAS,CAACV,iBAEnB,EAAKL,MAAMK,UAAU8B,SAAW,MAG5C,CACIf,MAAO,GACPC,UAAW,OACXC,IAAK,OACLC,OAAQ,WACJ,IAAMQ,EAAO,EAAK/B,MAAMK,UAAU0B,MAAQ,SACtCQ,GAAW,EAYf,MAXa,WAATR,GAAsB,EAAK/B,MAAMK,UAAU8B,UAC3CI,GAAW,GAEF,UAATR,GACE,EAAK/B,MAAMK,UAAU8B,SAClB,EAAKnC,MAAMK,UAAU+B,SACrB,EAAKpC,MAAMK,UAAUgC,SACrB,EAAKrC,MAAMK,UAAUiC,UAE1BC,GAAW,GAERA,EAAY,6BACf,kBAAC,IAAD,CAAQA,UAAQ,GAAhB,SACM,6BAAK,kBAAC,IAAD,CAAQC,QACnB,WACI,IACIC,EADEvC,EAAM,eAAO,EAAKF,MAAME,QAG1BuC,EADS,WAATV,EACU,CACNW,UAAW,EAAK1C,MAAMK,UAAU8B,SAG1B,CACNO,UAAW,CAAC,EAAK1C,MAAMK,UAAU8B,QAC7B,EAAKnC,MAAMK,UAAU+B,QACrB,EAAKpC,MAAMK,UAAUgC,QACrB,EAAKrC,MAAMK,UAAUiC,UAIjCpC,EAAOA,OAAOyC,SAASC,KAAKH,GAC5B,EAAK1B,SAAS,CAACb,WACf,EAAKI,OAAOuC,MAAK,WACb,EAAK9B,SAAS,CAACV,UAAW,UApBvB,c,sCA6B3B,IAAMA,EAAYS,KAAKd,MAAMK,UAC7B,MAAO,CAAC,CACJ0B,KAAM1B,EAAU0B,MAAQ,SACxBe,KAAM,CAACzC,EAAU8B,QAAS9B,EAAU+B,QAAS/B,EAAUgC,QAAShC,EAAUiC,a,sCAIjE,IAAD,OACZ,MAAO,CACH,CACIlB,MAAO,SACPC,UAAW,SACXC,IAAK,SACLC,OAAQ,SAACnB,EAAQqB,EAAMsB,GACnB,OAAO3C,EACH,kBAAC,IAAW4B,KAAZ,gBACE,kBAAC,IAAD,CAAQQ,QACN,WACI,EAAKxC,MAAMI,OAAO4C,eAAiBD,EACnC,EAAKnC,oBAAoBiC,SAH/B,cASd,CACIzB,MAAO,SACPC,UAAW,SACXC,IAAK,SACLC,OAAQ,SAAAC,GAAI,OAAI,2BAAIA,KAExB,CACIJ,MAAO,cACPC,UAAW,OACXC,IAAK,OACLC,OAAQ,SAACC,GAAD,OAAU,2BAAa,IAATA,EAAa,WAAa,eAEpD,CACIJ,MAAO,eACPC,UAAW,OACXC,IAAK,OACLC,OAAQ,SAAC0B,EAAYxB,EAAM/B,GACvB,OAAIuD,EACIC,MAAMC,QAAQF,GACVA,EAAWG,OAAS,EACbH,EAAWI,KAAK,SAACX,EAAWY,GAC/B,OAAO,6BAAK,kBAAC,IAAWtB,KAAZ,CAAiBC,SAAU,CACnCJ,SAAU,SAACK,GACP,EAAKlC,MAAME,OAAOA,OAAOyC,SAASjD,GAAMgD,UAAUY,GAAKpB,EACvD,EAAK5B,OAAOuC,UAEhBH,GAA4B,iCAG7B,kBAAC,IAAWV,KAAZ,CAAiBC,SAAU,CAC9BJ,SAAU,SAACK,GACP,EAAKlC,MAAME,OAAOA,OAAOyC,SAASjD,GAAMgD,UAAYR,EACpD,EAAK5B,OAAOuC,UAEhBI,EAAWG,OAAS,EAAIH,EAAW,GAAK,IAGzC,kBAAC,IAAWjB,KAAZ,CAAiBC,SAAU,CAC9BJ,SAAU,SAACK,GACP,EAAKlC,MAAME,OAAOA,OAAOyC,SAASjD,GAAMgD,UAAYR,EACpD,EAAK5B,OAAOuC,UAEhBI,GAGD,8BAInB,CACI7B,MAAO,YACPC,UAAW,YACXC,IAAK,YACLC,OAAQ,SAACC,EAAMC,EAAM8B,GACjB,OACI,6BACI,kBAAC,IAAD,CAAQ7B,aAAcF,EAAMG,MAAO,CAACC,MAAO,KACnCC,SAAU,SAACC,GAEP0B,QAAQC,IAAR,mBAAwB3B,IACxB,IAAM5B,EAAM,eAAO,EAAKF,MAAME,QAC9BA,EAAOA,OAAOyC,SAASY,GAAOG,UAAY5B,EAC1C,EAAKf,SACD,CAACb,WAEL,EAAKI,OAAOuC,SAEpB,kBAACjD,EAAD,CAAQkC,MAAM,OAAd,OACA,kBAAClC,EAAD,CAAQkC,MAAM,OAAd,WAKpB,CACIV,MAAO,GACPC,UAAW,UACXC,IAAK,UACLC,OAAQ,SAAC7B,EAAM+B,EAAM8B,GA6BjB,OACI,6BACe,IAAVA,EAAc,kBAAC,IAAD,CAAQhB,UAAQ,GAAhB,MAA+B,kBAAC,IAAD,CAAQC,QA9BjD,WACT,IAAMtC,EAAM,eAAO,EAAKF,MAAME,QACxByD,EAAIzD,EAAOA,OAAOyC,SAASY,GACjCrD,EAAOA,OAAOyC,SAASY,GAASrD,EAAOA,OAAOyC,SAASY,EAAQ,GAC/DrD,EAAOA,OAAOyC,SAASY,EAAQ,GAAKI,EACpC,IAAIvD,EAAM,eAAO,EAAKJ,MAAMI,QACxBA,EAAO4C,iBAAmBO,IAC1BnD,EAAO4C,eAAiB5C,EAAO4C,eAAiB,GAEpD,EAAKjC,SAAS,CAACb,SAAQE,WACvB,EAAKE,OAAOuC,MAAK,WACb,EAAKjC,oBAAoBiC,YAmBqB,MAC7CU,IAAU,EAAKvD,MAAME,OAAOA,OAAOyC,SAASS,OAAS,EAAI,kBAAC,IAAD,CAAQb,UAAQ,GAAhB,QACtD,kBAAC,IAAD,CAAQC,QAlBL,WACX,IAAMtC,EAAM,eAAO,EAAKF,MAAME,QACxByD,EAAIzD,EAAOA,OAAOyC,SAASY,GACjCrD,EAAOA,OAAOyC,SAASY,GAASrD,EAAOA,OAAOyC,SAASY,EAAQ,GAC/DrD,EAAOA,OAAOyC,SAASY,EAAQ,GAAKI,EACpC,IAAIvD,EAAM,eAAO,EAAKJ,MAAMI,QACxBA,EAAO4C,iBAAmBO,IAC1BnD,EAAO4C,eAAiB5C,EAAO4C,eAAiB,GAEpD,EAAKjC,SAAS,CAACb,SAAQE,WACvB,EAAKE,OAAOuC,MAAK,WACb,EAAKjC,oBAAoBiC,YAOrB,QACJ,kBAAC,IAAD,CAAQL,QAAS,WACb,IAAMtC,EAAM,eAAO,EAAKF,MAAME,QAC9BA,EAAOA,OAAOyC,SAAWzC,EAAOA,OAAOyC,SAASiB,QAAO,SAACC,EAASP,GAC7D,OAAOA,IAAMC,KAEjB,EAAKxC,SAAS,CAACb,WACf,EAAKI,OAAOuC,SANhB,gB,uCAePiB,GAAe,IAAD,OACrBrE,EAAM,GAYZ,OAXIqE,EAAanB,UACbmB,EAAanB,SAASoB,SAAQ,SAACF,EAASN,GACpC9D,EAAImD,KAAK,CACLxC,OAAQmD,IAAU,EAAKvD,MAAMI,OAAO4C,eACpCgB,OAAQT,EACRG,UAAWG,EAAQH,WAAaI,EAAaJ,WAAa,MAC1D3B,KAAMmB,MAAMC,QAAQU,EAAQnB,YAAcmB,EAAQnB,UAAUU,OAAS,EAAI,EAAI,EAC7EN,KAAMe,EAAQnB,eAInBjD,I,uCAGMqE,GACb,MAAO,CACH,CACIxC,IAAK,IACL2C,KAAM,oBACNnC,MAAOgC,EAAaJ,gB,kLAwB5B5C,KAAKC,SACD,CAACd,SAAS,I,kBAGWlB,EAAU,oBAAqB,O,cAA9CmB,E,gBACenB,EAAU,oBAAqB,O,OAA9CqB,E,OACNU,KAAKC,SAAS,CAACb,OAAQc,KAAKE,MAAMhB,KAClCY,KAAKC,SAAS,CAACX,OAAQY,KAAKE,MAAMd,K,kDAElCU,KAAKC,SAAS,CAACZ,MAAO,KAAEgB,U,yBAExBL,KAAKC,SACD,CAACd,SAAS,I,mLAOI6B,GACtB0B,QAAQC,IAAR,mBAAwB3B,IACxB,IAAM5B,EAAM,eAAOY,KAAKd,MAAME,QAC9BA,EAAOA,OAAOwD,UAAY5B,EAC1BhB,KAAKC,SACD,CAACb,WAELY,KAAKR,OAAOuC,S,yCAIGf,GACf0B,QAAQC,IAAR,mBAAwB3B,IACxB,IAAMzB,EAAS,eAAOS,KAAKd,MAAMK,WACjCA,EAAU0B,KAAOD,EACjBhB,KAAKC,SACD,CAACV,gB,+BAIC,IAGFZ,EAHC,EAE4BqB,KAAKd,MAA/BC,EAFF,EAEEA,QAASC,EAFX,EAEWA,OAAQC,EAFnB,EAEmBA,MAExB,GAAIF,EACAR,EAAM,kBAAC,IAAD,CAAMyE,UAAY,kBAACC,EAAA,EAAD,CAAiBxC,MAAO,CAACyC,SAAU,KAAMC,MAAI,WAErE,GAAKnE,GAAWA,EAAOA,OAEhB,CACH,IAAM4D,EAAe5D,EAAOA,OACtBoE,EAAmBxD,KAAKyD,iBAAiBT,GACzCpD,EAAmBI,KAAKJ,iBAAiBoD,GAC/CrE,EACI,6BACKU,EAAQ,kBAAC,IAAD,CAAOgB,QAAShB,EAAOqE,KAAK,UAAY,KAEjD,kBAAC,IAAWxC,KAAZ,wBACA,6BACA,kBAAC,IAAWA,KAAZ,CAAiByC,MAAI,GAArB,SAA6BX,EAAaY,MAC1C,6BACA,kBAAC,IAAD,CAAOC,QAAS7D,KAAK8D,gBACdC,WAAYP,EACZQ,WAAY,CACRC,MAAOT,EAAiBlB,OACxB4B,SAAUV,EAAiBlB,OAC3B6B,kBAAkB,KAE7B,6BACA,6BACA,kBAAC,IAAWjD,KAAZ,uBACA,6BACA,kBAAC,IAAD,CAAO2C,QAAS7D,KAAKoE,aACdL,WAAY/D,KAAKD,gBACjBiE,WAAY,CACRG,kBAAkB,KAE7B,kBAAC,IAAWjD,KAAZ,wBACA,6BACA,kBAAC,IAAD,CAAO2C,QAAS7D,KAAKH,gBACdkE,WAAYnE,EACZoE,WAAY,CACRC,MAAOrE,EAAiB0C,OACxB4B,SAAUtE,EAAiB0C,OAC3B6B,kBAAkB,WApCrCxF,EAAM,kBAAC,IAAD,CAAO0B,QAAQ,kBAAkBqD,KAAK,UA2CpD,OAAO/E,M,GA7cqB0F,IAAMC,W,OCQ3BC,MAXf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cACd,kBAAC,EAAD,SCGUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASrE,OACP,kBAAC,IAAMsE,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrD,MAAK,SAAAsD,GACJA,EAAaC,gBAEdC,OAAM,SAAAlG,GACLqD,QAAQrD,MAAMA,EAAMgB,c","file":"static/js/main.dd693787.chunk.js","sourcesContent":["const fetch = require('axios');\nlet serverUrl = process.env.NODE_ENV !== 'production'? 'http://localhost:3004':'';\n\nexport async function fetchData(url, method = 'GET', headers) {\n    let newUrl = `${(serverUrl?serverUrl:'')}${url}`;\n    const ret = await fetch({\n        url: newUrl,\n        method,\n        headers,\n        transformResponse: (req) => req,\n        withCredentials: true,\n        timeout: 4900,\n    });\n    return ret.data;\n}\n\nexport async function sendData(url, method = 'POST', data, headers) {\n    const ret = await fetch({\n        url:`${(serverUrl?serverUrl:'')}${url}`,\n        method,\n        data,\n        transformResponse: (req) => req,\n        headers: headers || {\n            'Content-Type': 'application/json',\n        },\n        withCredentials: true,\n        timeout: 4900,\n    });\n    return ret.data;\n}\n\n","import React from 'react';\nimport {Alert, Button, Select, Spin, Table, Typography} from 'antd';\nimport {LoadingOutlined} from '@ant-design/icons';\nimport {fetchData, sendData} from \"../restCalls\";\n\nconst {Option} = Select;\n\n\nexport default class Config extends React.Component {\n\n    async save() {\n        this.setState(\n            {loading: true}\n        );\n        try {\n            const data = JSON.stringify(this.state.config.config);\n            const config = await sendData('/admin/config/save',\n                'POST', data);\n            this.setState({config: JSON.parse(config)});\n        } catch (e) {\n            this.setState({error: e.message});\n        } finally {\n            this.setState(\n                {loading: false}\n            )\n        }\n    }\n\n    async saveActiveChannel() {\n        this.setState(\n            {loading: true}\n        );\n        try {\n            const data = JSON.stringify(this.state.status);\n            const status = await sendData('/admin/status/save',\n                'POST', data);\n            this.setState({status: JSON.parse(status)});\n        } catch (e) {\n            this.setState({error: e.message});\n        } finally {\n            this.setState(\n                {loading: false}\n            )\n        }\n    }\n\n    commonColumns() {\n        return [\n            {\n                title: 'Parameter Name',\n                dataIndex: 'name',\n                key: 'name',\n                render: text => <a>{text}</a>,\n            },\n            {\n                title: 'Parameter Value',\n                dataIndex: 'value',\n                key: 'value',\n                render: (text, meta) => {\n                    return meta.key === '1' ? (\n                        <div>\n                            <Select defaultValue={text} style={{width: 120}}\n                                    onChange={this.handleMainTransportChange}>\n                                <Option value=\"udp\">UDP</Option>\n                                <Option value=\"tcp\">TCP</Option>\n                            </Select>\n                        </div>) : <a>{text}</a>\n                }\n            }]\n    }\n\n    addColumns() {\n        return [{\n            title: 'Mode',\n            dataIndex: 'mode',\n            key: 'mode',\n            render: (text) => {\n                return (<div>\n                    <Select defaultValue={text} style={{width: 120}}\n                            onChange={this.handleCameraChange}>\n                        <Option value=\"single\">1 Camera</Option>\n                        <Option value=\"multi\">4 Cameras</Option>\n                    </Select>\n                </div>)\n            }\n        },\n            {\n                title: 'rtsp Streams',\n                dataIndex: 'rtsp',\n                key: 'rtsp',\n                render: () => {\n                    return this.state.newCamera.mode === 'multi' ? (\n                        <div>\n                            <Typography.Text editable={{\n                                onChange: (str) => {\n                                    const newCamera = {...this.state.newCamera};\n                                    newCamera.camera1 = str;\n                                    this.setState({newCamera});\n                                }\n                            }}>{this.state.newCamera.camera1 || ''}</Typography.Text>\n                            <br/>\n                            <Typography.Text editable={{\n                                onChange: (str) => {\n                                    const newCamera = {...this.state.newCamera};\n                                    newCamera.camera2 = str;\n                                    this.setState({newCamera});\n                                }\n                            }}>{this.state.newCamera.camera2 || ''}</Typography.Text>\n                            <br/>\n                            <Typography.Text editable={{\n                                onChange: (str) => {\n                                    const newCamera = {...this.state.newCamera};\n                                    newCamera.camera3 = str;\n                                    this.setState({newCamera});\n                                }\n                            }}>{this.state.newCamera.camera3 || ''}</Typography.Text>\n                            <br/>\n                            <Typography.Text editable={{\n                                onChange: (str) => {\n                                    const newCamera = {...this.state.newCamera};\n                                    newCamera.camera4 = str;\n                                    this.setState({newCamera});\n                                }\n                            }}>{this.state.newCamera.camera4 || ''}</Typography.Text>\n                            <br/>\n                        </div>) : <Typography.Text editable={{\n                        onChange: (str) => {\n                            const newCamera = {...this.state.newCamera};\n                            newCamera.camera1 = str;\n                            this.setState({newCamera});\n                        }\n                    }}>{this.state.newCamera.camera1 || ''}</Typography.Text>\n                }\n            },\n            {\n                title: '',\n                dataIndex: 'save',\n                key: 'save',\n                render: () => {\n                    const mode = this.state.newCamera.mode || 'single';\n                    let disabled = false;\n                    if (mode === 'single' && !this.state.newCamera.camera1) {\n                        disabled = true;\n                    }\n                    if (mode === 'multi' &&\n                        (!this.state.newCamera.camera1 ||\n                            !this.state.newCamera.camera2 ||\n                            !this.state.newCamera.camera3 ||\n                            !this.state.newCamera.camera4\n                        )) {\n                        disabled = true;\n                    }\n                    return disabled ? (<div>\n                        <Button disabled>Save</Button>\n                    </div>) : <div><Button onClick={\n                        () => {\n                            const config = {...this.state.config};\n                            let newItem;\n                            if (mode === 'single') {\n                                newItem = {\n                                    streamUrl: this.state.newCamera.camera1,\n                                }\n                            } else {\n                                newItem = {\n                                    streamUrl: [this.state.newCamera.camera1,\n                                        this.state.newCamera.camera2,\n                                        this.state.newCamera.camera3,\n                                        this.state.newCamera.camera4]\n                                }\n                            }\n\n                            config.config.channels.push(newItem);\n                            this.setState({config})\n                            this.save().then(() => {\n                                this.setState({newCamera: {}})\n                            })\n                        }\n                    }>Save</Button></div>\n                }\n            },]\n    }\n\n    addDatasource() {\n        const newCamera = this.state.newCamera;\n        return [{\n            mode: newCamera.mode || 'single',\n            rtsp: [newCamera.camera1, newCamera.camera2, newCamera.camera3, newCamera.camera4]\n        }]\n    }\n\n    cameraColumns() {\n        return [\n            {\n                title: 'Status',\n                dataIndex: 'status',\n                key: 'status',\n                render: (status, meta, pos) => {\n                    return status ?\n                        <Typography.Text>Current</Typography.Text>\n                        : <Button onClick={\n                            () => {\n                                this.state.status.currentChannel = pos;\n                                this.saveActiveChannel().then()\n                            }\n                        }>Activate</Button>\n\n                },\n            },\n            {\n                title: 'Camera',\n                dataIndex: 'camera',\n                key: 'camera',\n                render: text => <a>{text}</a>,\n            },\n            {\n                title: 'Camera Mode',\n                dataIndex: 'mode',\n                key: 'mode',\n                render: (text) => <a>{text === 1 ? '1 Camera' : '4 Cameras'}</a>,\n            },\n            {\n                title: 'rtsp Streams',\n                dataIndex: 'rtsp',\n                key: 'rtsp',\n                render: (streamUrls, meta, data) => {\n                    if (streamUrls) {\n                        if (Array.isArray(streamUrls)) {\n                            if (streamUrls.length > 1) {\n                                return streamUrls.map(((streamUrl, i) => {\n                                    return <div><Typography.Text editable={{\n                                        onChange: (str) => {\n                                            this.state.config.config.channels[data].streamUrl[i] = str;\n                                            this.save().then();\n                                        }\n                                    }}>{streamUrl}</Typography.Text><br/></div>\n                                }))\n                            } else {\n                                return <Typography.Text editable={{\n                                    onChange: (str) => {\n                                        this.state.config.config.channels[data].streamUrl = str;\n                                        this.save().then();\n                                    }\n                                }}>{streamUrls.length > 0 ? streamUrls[0] : ''}</Typography.Text>\n                            }\n                        } else {\n                            return <Typography.Text editable={{\n                                onChange: (str) => {\n                                    this.state.config.config.channels[data].streamUrl = str;\n                                    this.save().then();\n                                }\n                            }}>{streamUrls}</Typography.Text>\n                        }\n                    } else {\n                        return <a/>\n                    }\n                }\n            },\n            {\n                title: 'Transport',\n                dataIndex: 'transport',\n                key: 'transport',\n                render: (text, meta, index) => {\n                    return (\n                        <div>\n                            <Select defaultValue={text} style={{width: 120}}\n                                    onChange={(value) => {\n                                        debugger;\n                                        console.log(`selected ${value}`);\n                                        const config = {...this.state.config};\n                                        config.config.channels[index].transport = value;\n                                        this.setState(\n                                            {config}\n                                        )\n                                        this.save().then();\n                                    }}>\n                                <Option value=\"udp\">UDP</Option>\n                                <Option value=\"tcp\">TCP</Option>\n                            </Select>\n                        </div>)\n                }\n            },\n            {\n                title: '',\n                dataIndex: 'actions',\n                key: 'actions',\n                render: (data, meta, index) => {\n                    const onUp = () => {\n                        const config = {...this.state.config};\n                        const v = config.config.channels[index];\n                        config.config.channels[index] = config.config.channels[index - 1]\n                        config.config.channels[index - 1] = v;\n                        let status = {...this.state.status};\n                        if (status.currentChannel === index) {\n                            status.currentChannel = status.currentChannel - 1;\n                        }\n                        this.setState({config, status})\n                        this.save().then(() => {\n                            this.saveActiveChannel().then()\n                        });\n                    };\n                    const onDown = () => {\n                        const config = {...this.state.config};\n                        const v = config.config.channels[index];\n                        config.config.channels[index] = config.config.channels[index + 1]\n                        config.config.channels[index + 1] = v;\n                        let status = {...this.state.status};\n                        if (status.currentChannel === index) {\n                            status.currentChannel = status.currentChannel + 1;\n                        }\n                        this.setState({config, status});\n                        this.save().then(() => {\n                            this.saveActiveChannel().then()\n                        });\n                    };\n                    return (\n                        <div>\n                            {index === 0 ? <Button disabled>UP</Button> : <Button onClick={onUp}>UP</Button>}\n                            {index === this.state.config.config.channels.length - 1 ? <Button disabled>DOWN</Button> :\n                                <Button onClick={onDown}>DOWN</Button>}\n                            <Button onClick={() => {\n                                const config = {...this.state.config};\n                                config.config.channels = config.config.channels.filter((channel, i) => {\n                                    return i !== index\n                                });\n                                this.setState({config})\n                                this.save().then();\n                            }}>Delete</Button>\n                        </div>\n                    )\n                }\n\n            }]\n    }\n\n    cameraDatasource(loadedConfig) {\n        const ret = [];\n        if (loadedConfig.channels) {\n            loadedConfig.channels.forEach((channel, index) => {\n                ret.push({\n                    status: index === this.state.status.currentChannel,\n                    camera: index,\n                    transport: channel.transport || loadedConfig.transport || 'udp',\n                    mode: Array.isArray(channel.streamUrl) && channel.streamUrl.length > 1 ? 4 : 1,\n                    rtsp: channel.streamUrl\n                });\n            })\n        }\n        return ret;\n    }\n\n    commonDatasource(loadedConfig) {\n        return [\n            {\n                key: '1',\n                name: 'Default Transport',\n                value: loadedConfig.transport,\n            },\n        ]\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            config: null,\n            error: null,\n            status: null,\n            newCamera: {},\n        };\n        this.save = this.save.bind(this);\n        this.handleMainTransportChange = this.handleMainTransportChange.bind(this);\n        this.handleCameraChange = this.handleCameraChange.bind(this);\n        this.cameraDatasource = this.cameraDatasource.bind(this);\n        this.cameraColumns = this.cameraColumns.bind(this);\n        this.saveActiveChannel = this.saveActiveChannel.bind(this);\n        this.addDatasource = this.addDatasource.bind(this);\n    }\n\n    async componentDidMount() {\n        this.setState(\n            {loading: true}\n        )\n        try {\n            const config = await fetchData('/admin/config/get', 'GET');\n            const status = await fetchData('/admin/status/get', 'GET');\n            this.setState({config: JSON.parse(config)});\n            this.setState({status: JSON.parse(status)});\n        } catch (e) {\n            this.setState({error: e.message});\n        } finally {\n            this.setState(\n                {loading: false}\n            )\n        }\n\n\n    }\n\n    handleMainTransportChange(value) {\n        console.log(`selected ${value}`);\n        const config = {...this.state.config};\n        config.config.transport = value;\n        this.setState(\n            {config}\n        )\n        this.save().then();\n    }\n\n\n    handleCameraChange(value) {\n        console.log(`selected ${value}`);\n        const newCamera = {...this.state.newCamera};\n        newCamera.mode = value;\n        this.setState(\n            {newCamera}\n        )\n    }\n\n    render() {\n\n        const {loading, config, error} = this.state;\n        let ret;\n        if (loading) {\n            ret = <Spin indicator={(<LoadingOutlined style={{fontSize: 128}} spin/>)}/>\n        } else {\n            if (!config || !config.config) {\n                ret = <Alert message=\"config is empty\" type=\"error\"/>\n            } else {\n                const loadedConfig = config.config;\n                const commonDataSource = this.commonDatasource(loadedConfig);\n                const cameraDatasource = this.cameraDatasource(loadedConfig);\n                ret =\n                    <div>\n                        {error ? <Alert message={error} type=\"error\"/> : null\n                        }\n                        <Typography.Text>Common Settings</Typography.Text>\n                        <br/>\n                        <Typography.Text code>File: {loadedConfig.file}</Typography.Text>\n                        <br/>\n                        <Table columns={this.commonColumns()}\n                               dataSource={commonDataSource}\n                               pagination={{\n                                   total: commonDataSource.length,\n                                   pageSize: commonDataSource.length,\n                                   hideOnSinglePage: true\n                               }}/>\n                        <br/>\n                        <br/>\n                        <Typography.Text>Add new Camera</Typography.Text>\n                        <br/>\n                        <Table columns={this.addColumns()}\n                               dataSource={this.addDatasource()}\n                               pagination={{\n                                   hideOnSinglePage: true\n                               }}/>\n                        <Typography.Text>Camera Settings</Typography.Text>\n                        <br/>\n                        <Table columns={this.cameraColumns()}\n                               dataSource={cameraDatasource}\n                               pagination={{\n                                   total: cameraDatasource.length,\n                                   pageSize: cameraDatasource.length,\n                                   hideOnSinglePage: true\n                               }}/>\n                    </div>\n\n            }\n        }\n\n        return ret;\n    }\n}\n","import React from 'react';\nimport Config from './components/Config';\nimport './App.css';\nimport {Typography} from \"antd\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n          <Config/>\n      </header>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}